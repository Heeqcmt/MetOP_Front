[{"/Users/bermau/Projects/opie_front/src/index.js":"1","/Users/bermau/Projects/opie_front/src/Header.js":"2","/Users/bermau/Projects/opie_front/src/Footer.js":"3","/Users/bermau/Projects/opie_front/src/Main.js":"4","/Users/bermau/Projects/opie_front/src/mainComponent/selector.js":"5","/Users/bermau/Projects/opie_front/src/mainComponent/eventBoard.js":"6"},{"size":404,"mtime":1609336912474,"results":"7","hashOfConfig":"8"},{"size":761,"mtime":1610066393628,"results":"9","hashOfConfig":"8"},{"size":1604,"mtime":1610067087154,"results":"10","hashOfConfig":"8"},{"size":3331,"mtime":1609873559250,"results":"11","hashOfConfig":"8"},{"size":1623,"mtime":1609877304300,"results":"12","hashOfConfig":"8"},{"size":1764,"mtime":1609876786423,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1werqyu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/bermau/Projects/opie_front/src/index.js",[],["29","30"],"/Users/bermau/Projects/opie_front/src/Header.js",["31"],"/Users/bermau/Projects/opie_front/src/Footer.js",[],"/Users/bermau/Projects/opie_front/src/Main.js",["32","33","34","35","36","37"],"import React from \"react\";\nimport Selector from \"./mainComponent/selector\";\nimport EventBoard from \"./mainComponent/eventBoard\";\nconst provinceArray = [\n    \"All\",\n    \"Ontario\",\n    \"British Columbia\"\n];\n\nconst partyArray = [\n    \"All\",\n    \"Liberal\",\n    \"Conservative\",\n    \"NDP\"\n];\n\n\n//main.js constains filter (selection.js) and the actual event board display(eventboard.js)\n//get the event array from opie_api\n//save into testEventArray and filteredEvents\n//filtered events are filter through feedback from selection.js \n//testEventArray holds all the events scrapped from opie_db\nexport default class Main extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            selectedParty: 'All',\n            selectedProvince: 'All',\n            loading: true,\n            testEventArray: null\n        };\n        this.filteredEvents = null;\n        this.handlePartyChange = this.handlePartyChange.bind(this);\n        this.handleProvinceChange = this.handleProvinceChange.bind(this);\n    }\n\n    handlePartyChange(e){\n        this.setState({selectedParty: e.target.value});\n        \n        \n    }\n    handleProvinceChange(e){\n        this.setState({selectedProvince: e.target.value});\n    \n    }\n\n    async componentDidMount()\n    {\n        const url = \"https://hy2olkyzs9.execute-api.us-east-1.amazonaws.com/default\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({testEventArray: data});\n        this.filteredEvents = this.state.testEventArray;\n        this.setState({loading:false})\n        \n        \n    }\n    \n    \n    render()\n    {\n\n\n        if(this.state.loading)\n        {\n            return(\n             \n                <div>Loading events</div>\n                \n            )\n        }\n        else\n        {\n            if(this.state.selectedParty == 'All' && this.state.selectedProvince == 'All'){\n                this.filteredEvents = this.state.testEventArray;\n            }\n            else if (this.state.selectedParty != 'All' && this.state.selectedProvince == 'All')\n            {\n                this.filteredEvents = this.state.testEventArray.filter(testEvent => testEvent.Info.party.includes(this.state.selectedParty));\n            }\n            else if (this.state.selectedProvince != 'All' && this.state.selectedParty == 'All')\n            {\n                this.filteredEvents = this.state.testEventArray.filter(testEvent => testEvent.province.includes(this.state.selectedProvince));\n            }\n            else\n            {\n                this.filteredEvents = this.state.testEventArray.filter(testEvent => testEvent.province.includes(this.state.selectedProvince) && testEvent.Info.party.includes(this.state.selectedParty));\n            }\n            \n            return(\n                \n                <>\n                < Selector partyArray ={partyArray} provinceArray = {provinceArray}  {...this.props} onPartyChange = {this.handlePartyChange} onProvinceChange ={this.handleProvinceChange}/>\n                < EventBoard eventArray ={this.filteredEvents}/>\n                {/* <h4>province seleceted : {this.state.selectedProvince} </h4>\n                <h4>party selected: {this.state.selectedParty}</h4> */}\n                </>\n              \n            );\n        }\n    };\n};\n","/Users/bermau/Projects/opie_front/src/mainComponent/selector.js",[],"/Users/bermau/Projects/opie_front/src/mainComponent/eventBoard.js",["38","39"],"import React from 'react';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Card from 'react-bootstrap/Card';\nimport { Container,Row,Col } from 'react-bootstrap';\n\n//shows individual events in an event board\n//gets the array of the events from main.js\n\nexport default class EventBoard extends React.Component {\n    render() {\n        return (\n            \n            \n                <Container fluid>\n                    <Row>\n                       \n                        {\n                            this.props.eventArray.map(\n                                event => (\n                                    <Col md=\"4\" >\n                                        <a style={{cursor:'pointer'}} onClick={()=>window.open(event.Info.link,\"_blank\")}>\n                                        <Card bg='light' style={{flex:2}}> \n                                            <Card.Header bg='dark'>{event.Info.title}</Card.Header>\n                                            <Card.Body >\n                                                <Card.Text>\n                                                    <div>{event.Info.party}</div>\n                                                    <div>{event.province}</div>\n                                                    <div>{event.Info.date}</div>\n                                                </Card.Text>\n                            \n                                            </Card.Body>\n                                        </Card>\n                                        </a>\n                                    </Col>\n\n                                )\n                            )\n                        }\n        \n                    </Row>\n                </Container>\n           \n        );\n    };\n}\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":16,"column":25,"nodeType":"46","endLine":16,"endColumn":58},{"ruleId":"47","severity":1,"message":"48","line":76,"column":41,"nodeType":"49","messageId":"50","endLine":76,"endColumn":43},{"ruleId":"47","severity":1,"message":"48","line":76,"column":81,"nodeType":"49","messageId":"50","endLine":76,"endColumn":83},{"ruleId":"47","severity":1,"message":"51","line":79,"column":47,"nodeType":"49","messageId":"50","endLine":79,"endColumn":49},{"ruleId":"47","severity":1,"message":"48","line":79,"column":87,"nodeType":"49","messageId":"50","endLine":79,"endColumn":89},{"ruleId":"47","severity":1,"message":"51","line":83,"column":50,"nodeType":"49","messageId":"50","endLine":83,"endColumn":52},{"ruleId":"47","severity":1,"message":"48","line":83,"column":87,"nodeType":"49","messageId":"50","endLine":83,"endColumn":89},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":21,"column":41,"nodeType":"46","endLine":21,"endColumn":123},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'CardDeck' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]